#	Comments & interleaves
rule(interleave=false) comment = "//" (. - ("\r" | "\n"))*;
rule(interleave=false) blockSpacer = " " | "\t" | "\r";
rule(interleave=false) padding = blockSpacer | "\n" | comment;
interleave = padding;

#	tokens
rule(interleave=false) identifier = ("a".."z" | "A".."Z") ("a".."z" | "A".."Z" | "0".."9")* => text;
rule(interleave=false) boolean = "true" | "false" => boolean(text);
rule(interleave=false) number = ("0".."9");
rule(interleave=false) integer = "-"? number+ => integer(text);
rule(interleave=false) float = "-"? number* "." number+ => float(text);
rule(interleave=false) character = normal:(. - ("\"" | "\r" | "\n" | "\\"))
	| escapeQuote:("\\" "\"") | escapeBackslash:"\\\\"
	| escapeLetter:("\\" l:("n" | "r" | "t" | "v"))
	| escapeHexa:("\\x" h:("0".."9" | "a".."f" | "A".."F"){1,2});
rule(interleave=false) singleQuotableString = ((. - "'") | "\\'")* => text;
rule(interleave=false) doubleQuotableString = ((. - '"') | '\\"')* => text;
rule(interleave=false) singleQuotedString = "'" q:singleQuotableString "'" => q;
rule(interleave=false) doubleQuotedString = '"' q:doubleQuotableString '"' => q;
rule(interleave=false) quotedString = doubleQuotedString | singleQuotedString;

#	Litterals
rule literalValue = boolean:boolean | integer:integer | float:float | string:quotedString;

#	Function invoke
rule expressionList = head:expression tail:("," e:expression => e)*
	=> prepend(head, tail);
rule functionInvoke = ns:(id:identifier "." => id)? name:identifier
	parameters:("(" el:expressionList? ")" => firstOrNull(el))?
	=> {
		"namespace" : firstOrNull(ns),
		"name" : name,
		"parameters" : coalesce([firstOrNull(parameters), []])
	};

#	Parameter access
rule parameterAccess = expression:nonBinaryExpression names:("." name:identifier => name)+;

#	Binary operators
rule binaryOperator = ("+" => "add")
	| ("-" => "substract")
	| ("*" => "product")
	| ("/" => "division")
	| ("^" => "power")
	| ("==" => "equals")
	| ("!=" => "notEquals")
	| ("<=" => "lesserOrEquals")
	| ("<" => "lesser")
	| (">=" => "greaterOrEquals")
	| (">" => "greater")
	| ("&&" => "and")
	| ("||" => "or");
rule binaryOperation = left:nonBinaryExpression operator:binaryOperator right:expression;

#	if / conditionals
rule ternaryIf = "if" "(" condition:expression "," trueExpression:expression ","
	falseExpression:expression ")";
rule scopedExpression = "{" "return" e:expression ";" "}" => e;
rule elseIf = "else" "if" "(" condition:expression ")" thenExpression:scopedExpression;
rule chainedIfElse = "if" "(" condition:expression ")" thenExpression:scopedExpression
	elseIfs:elseIf* "else" elseExpression:scopedExpression;
rule if = ternaryIf:ternaryIf | chainedIfElse:chainedIfElse;

#	Expression
rule parenthesis = "(" e:expression ")" => e;
rule nonBinaryExpression = if:if
	| parenthesis:parenthesis
	| primitive:literalValue
	| functionInvoke:functionInvoke;
rule expression = nonBinaryExpression
	| (parameterAccess => { "parameterAccess" : defaultOutput })
	| (binaryOperation => { "binaryOperation" : defaultOutput });

#	Rules
#	TODO

#	main rule
rule main = "a"{0} e:expression? => { "rules" : [], "expression" : firstOrNull(e) };