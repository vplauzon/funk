#	Comments & interleaves
rule(interleave=false) comment = "//" (. - ("\r" | "\n"))*;
rule(interleave=false) blockSpacer = " " | "\t" | "\r";
rule(interleave=false) padding = blockSpacer | "\n" | comment;
interleave = padding;

#	tokens
rule(interleave=false) identifier = ("a".."z" | "A".."Z") ("a".."z" | "A".."Z" | "0".."9")* => text;
rule(interleave=false) boolean = "true" | "false" => boolean(text);
rule(interleave=false) number = ("0".."9");
rule(interleave=false) integer = "-"? number+ => integer(text);
rule(interleave=false) float = "-"? number* ("." number+)? => float(text);
rule(interleave=false) character = normal:(. - ("\"" | "\r" | "\n" | "\\"))
	| escapeQuote:("\\" "\"") | escapeBackslash:"\\\\"
	| escapeLetter:("\\" l:("n" | "r" | "t" | "v"))
	| escapeHexa:("\\x" h:("0".."9" | "a".."f" | "A".."F"){1,2});
rule(interleave=false) singleQuotableString = ((. - "'") | "\\'")* => text;
rule(interleave=false) doubleQuotableString = ((. - '"') | '\\"')* => text;
rule(interleave=false) singleQuotedString = "'" q:singleQuotableString "'" => q;
rule(interleave=false) doubleQuotedString = '"' q:doubleQuotableString '"' => q;
rule(interleave=false) quotedString = doubleQuotedString | singleQuotedString;

#	Litterals
rule literalValue = boolean:boolean | float:float | integer:integer | string:quotedString;

#	main rule
rule main = boolean:boolean | integer:integer | float:float | string:quotedString => { "statements" : [{ "expression": { "primitive" : defaultOutput } }]};