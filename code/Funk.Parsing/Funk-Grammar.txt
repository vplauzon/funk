#	Comments & interleaves
rule(interleave=false) comment = "//" (. - ("\r" | "\n"))*;
rule(interleave=false) blockSpacer = " " | "\t" | "\r";
rule(interleave=false) padding = blockSpacer | "\n" | comment;
interleave = padding;

#	tokens
rule(interleave=false) identifier = ("a".."z" | "A".."Z") ("a".."z" | "A".."Z" | "0".."9")* => text;
rule(interleave=false) boolean = "true" | "false" => boolean(text);
rule(interleave=false) number = ("0".."9");
rule(interleave=false) integer = "-"? number+ => integer(text);
rule(interleave=false) float = "-"? number* "." number+ => float(text);
rule(interleave=false) character = normal:(. - ("\"" | "\r" | "\n" | "\\"))
	| escapeQuote:("\\" "\"") | escapeBackslash:"\\\\"
	| escapeLetter:("\\" l:("n" | "r" | "t" | "v"))
	| escapeHexa:("\\x" h:("0".."9" | "a".."f" | "A".."F"){1,2});
rule(interleave=false) singleQuotableString = ((. - "'") | "\\'")* => text;
rule(interleave=false) doubleQuotableString = ((. - '"') | '\\"')* => text;
rule(interleave=false) singleQuotedString = "'" q:singleQuotableString "'" => q;
rule(interleave=false) doubleQuotedString = '"' q:doubleQuotableString '"' => q;
rule(interleave=false) quotedString = doubleQuotedString | singleQuotedString;

#	Litterals
rule literalValue = boolean:boolean | integer:integer | float:float | string:quotedString;

#	Function invoke
rule parameterInvoke = name:(id:identifier "=" => id)? e:expression
	=> {
		"name" : firstOrNull(name),
		"expression" : e
	};
rule parameterInvokeList = head:parameterInvoke tail:("," p:parameterInvoke => p)*
	=> prepend(head, tail);
rule functionInvoke = ns:(id:identifier "." => id)? name:identifier parameters:("(" pil:parameterInvokeList? ")" => firstOrNull(pil))?
	=> {
		"namespace" : firstOrNull(ns),
		"name" : name,
		"parameters" : coalesce([firstOrNull(parameters), []])
	};

#	Arithmetic
rule binaryArithmeticOperand = ("+" => "add")
	| ("-" => "substract")
	| ("*" => "product")
	| ("/" => "division")
	| ("^" => "power");
rule binaryArithmetic = e1:nonBinaryExpression op:binaryArithmeticOperand e2:expression =>
	{ "left" : e1, "right" : e2, "operand": op};
rule parenthesis = "(" e:expression ")" => e;

#	Expression
rule binaryExpression = "a"{0} ba:binaryArithmetic => { "arithmeticBinary" : ba };
rule nonBinaryExpression = primitive:literalValue
	| functionInvoke:functionInvoke
	| parenthesis:parenthesis;
rule expression = binaryExpression | nonBinaryExpression;

#	Rules
#	TODO

#	main rule
rule main = "a"{0} e:expression? => { "rules" : [], "expression" : firstOrNull(e) };